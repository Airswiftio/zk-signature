#ifdef __cplusplus
extern "C" {
    #endif


#include "issuer.h"


// Creates a master secret.
int ursa_cl_prover_new_master_secret(void **master_secret);
int ursa_cl_master_secret_to_json(void *master_secret, char **master_secret_json_p);
int ursa_cl_master_secret_from_json(char *master_secret_json_p, void **master_secret_p);

// free
int ursa_cl_master_secret_free(void *master_secret);

int ursa_cl_prover_blind_credential_secrets(void *credential_pub_key,
                                            void *credential_key_correctness_proof,
                                            void *credential_values,
                                            void *credential_nonce,
                                            void **blinded_credential_secrets_p,
                                            void **credential_secrets_blinding_factors_p,
                                            void **blinded_credential_secrets_correctness_proof_p);

int ursa_cl_blinded_credential_secrets_to_json(void *blinded_credential_secrets, char **blinded_credential_secrets_json_p);
int ursa_cl_blinded_credential_secrets_from_json(char *blinded_credential_secrets_json, void **blinded_credential_secrets_p);

int ursa_cl_blinded_credential_secrets_free(void *blinded_credential_secrets_p);

// Returns json representation of credential secrets blinding factors.
int ursa_cl_credential_secrets_blinding_factors_to_json(void *credential_secrets_blinding_factors, char **credential_secrets_blinding_factors_json_p);
// Creates and returns credential secrets blinding factors json.
int ursa_cl_credential_secrets_blinding_factors_from_json(char *credential_secrets_blinding_factors_json,
                                                          void **credential_secrets_blinding_factors_p);
int ursa_cl_credential_secrets_blinding_factors_free(void *credential_secrets_blinding_factors_p);

// Returns json representation of blinded credential secrets correctness proof.
int ursa_cl_blinded_credential_secrets_correctness_proof_to_json(void *blinded_credential_secrets_correctness_proof,
                                                             char **blinded_credential_secrets_correctness_proof_json_p);

// Creates and returns blinded credential secrets correctness proof json.
int ursa_cl_blinded_credential_secrets_correctness_proof_from_json(
    char *blinded_credential_secrets_correctness_proof_json,
    void **blinded_credential_secrets_correctness_proof_p);

// Deallocates blinded credential secrets correctness proof instance.
int ursa_cl_blinded_credential_secrets_correctness_proof_free(
    void *blinded_credential_secrets_correctness_proof);

// Updates the credential signature by a credential secrets blinding factors.

int ursa_cl_prover_process_credential_signature(
    void *credential_signature,                // * `credential_signature` - Credential signature instance pointer generated by Issuer.
    void *credential_values,                   // * `credential_values` - Credential values instance pointer.
    void *signature_correctness_proofd,        // * `signature_correctness_proof` - Credential signature correctness proof instance pointer.
    void *credential_secrets_blinding_factors, // * `credential_secrets_blinding_factors` - Credential secrets blinding factors instance pointer.
    void *credential_pub_key,               // * `credential_pub_key` - Credential public key instance pointer.
    void *credential_issuance_nonced,          // * `nonce` -  Nonce instance pointer was used by Issuer for the creation of signature_correctness_proof.
    void *rev_key_pub,                         // * `rev_key_pub` - (Optional) Revocation registry public key  instance pointer.
    void *rev_reg,                             // * `rev_reg` - (Optional) Revocation registry  instance pointer.
    void *witness                              // * `witness` - (Optional) Witness instance pointer.
);

int ursa_cl_prover_get_credential_revocation_index(void *credential_signature, int *cred_rev_indx);

// Creates and returns proof builder.
// The purpose of proof builder is building of proof entity according to the given request
int ursa_cl_prover_new_proof_builder(void **proof_builder_p);

// Add a common attribute to the proof builder
int ursa_cl_proof_builder_add_common_attribute(void *proof_builder, char *attribute_name);

int ursa_cl_proof_builder_add_sub_proof_request(void *proof_builder,
                                                void *sub_proof_request,
                                                void *credential_schema,
                                                void *non_credential_schema,
                                                void *credential_signature,
                                                void *credential_values,
                                                void *credential_pub_key,
                                                void *rev_reg,
                                                void *witness);

// Finalize proof.
int ursa_cl_proof_builder_finalize(void *proof_builder,  void *nonce, void **proof_p);

// Returns json representation of proof.
int ursa_cl_proof_to_json(void *proof, char **proof_json_p);

// Creates and returns proof json.
int ursa_cl_proof_from_json(char *proof_json, void **proof_p);

// Deallocates proof instance.
int ursa_cl_proof_free(void *proof);

#ifdef __cplusplus
}
#endif